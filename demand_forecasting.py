# -*- coding: utf-8 -*-
"""Demand_Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gcD--qWsyX0_3xQcG-UplyZuqHKI4Md5
"""

import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

"""### Data Cleaning :"""

df = pd.read_csv("/content/train 2.csv")
df.head(5)

df.info()

df.describe()

df = df.drop_duplicates()

df['date'] = pd.to_datetime(df['date'])
df.info()

df.info()

monthly_sales = df.groupby(pd.Grouper(key='date', freq='M')).sum().reset_index()

monthly_sales.head(10)

"""Aggregating Sales By Monthly Basis

"""

plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel('Date')
plt.ylabel('sales')
plt.title('Monthly Customer Sales')
plt.show()

monthly_sales['sales_diff'] = monthly_sales['sales'].diff()
monthly_sales.head(10)

monthly_sales = monthly_sales.dropna()
monthly_sales.head(10)

plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales_diff'])
plt.xlabel('Date')
plt.ylabel('Sales_diff')
plt.show()

data = monthly_sales.drop(['date', 'item', 'store', 'sales'], axis=1)

for i in range(1, 13):
  col_name = 'month_' + str(i)
  data[col_name] = data['sales_diff'].shift(i)
data = data.dropna().reset_index(drop=True)
data.head(10)

"""Splitting The Data Into Train and Test Model"""

data.info()

train_data = data[:-3]
test_data = data[-3:]
print('Train Data Shape : ', train_data.shape)
print('Test Data Shape : ', test_data.shape)

scaler = MinMaxScaler(feature_range=(-1, 1))
scaler.fit(train_data)
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

x_train, y_train = train_data[:,1:], train_data[:,0:1]
x_test, y_test = test_data[:,1:], test_data[:,0:1]
y_train = y_train.ravel()
y_test = y_test.ravel()
print('X_train shape : ', x_train.shape)
print('Y_train shape : ', y_train.shape)
print('X_test shape : ', x_test.shape)
print('Y_test shape : ', y_test.shape)

"""Making The Prediction Dataframe to Merge the Predicted Sales Price of All Trained Algorithms"""

sales_dates = monthly_sales['date'][-3:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

act_sales = monthly_sales['sales'][-3:].to_list()
print(act_sales)

"""Creating Linear Regression Model and Predicted output"""

lr_model = LinearRegression()
lr_model.fit(x_train, y_train)
lr_pre = lr_model.predict(x_test)

lr_pre = lr_pre.reshape(-1, 1)
lr_pre_test = np.concatenate([lr_pre, x_test], axis=1)
lr_pre_test = scaler.inverse_transform(lr_pre_test)

result = []
for i in range(0, len(lr_pre_test)):
  result.append(lr_pre_test[i][0] + act_sales[i])
lr_pre_set = pd.Series(result, name='Linear Prediction')
predict_df = predict_df.merge(lr_pre_set, left_index=True, right_index=True)

predict_df

lr_mse = np.sqrt(mean_squared_error(predict_df['Linear Prediction'], monthly_sales['sales'][-3:]))
lr_mae = mean_absolute_error(predict_df['Linear Prediction'], monthly_sales['sales'][-3:])
lr_r2 = r2_score(predict_df['Linear Prediction'], monthly_sales['sales'][-3:])
print('Linear Regression MSE : ', lr_mse)
print('Linear Regression MAE : ', lr_mae)
print('Linear Regression R2 : ', lr_r2)

plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.plot(predict_df['date'], predict_df['Linear Prediction'])
plt.title('Customer sales Forecast using LR Model')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend(['Actual sales', 'Predicted sales'])
plt.show()